generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String    @map("password_hash")
  name          String
  phone         String?
  cpf           String?   @unique
  birthDate     DateTime? @map("birth_date")
  gender        String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  orders        Order[]
  favorites     Favorite[]
  addresses     Address[]
  cart          Cart?

  @@map("users")
}

model Product {
  id              String        @id @default(uuid())
  codigo          String        @unique
  modelo          String
  luminosidade    Luminosidade
  material        Material
  valorM2         Float         @map("valor_m2")
  larguraMaxCm    Int           @map("largura_max_cm")
  alturaMaxCm     Int           @map("altura_max_cm")
  areaMinM2       Float         @default(1.0) @map("area_min_m2")
  ambientes       String  // JSON array stored as string
  imagens         String  // JSON array stored as string
  descricao       String
  estoque         Int           @default(0)
  ativo           Boolean       @default(true)
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  orderItems      OrderItem[]
  favorites       Favorite[]
  cartItems       CartItem[]

  @@map("products")
}

model Cart {
  id              String      @id @default(uuid())
  userId          String      @unique @map("user_id")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items           CartItem[]

  @@map("carts")
}

model CartItem {
  id              String    @id @default(uuid())
  cartId          String    @map("cart_id")
  productId       String    @map("product_id")
  widthCm         Int       @map("width_cm")
  heightCm        Int       @map("height_cm")
  areaCobravel    Float     @map("area_cobravel")
  pricePerM2      Float     @map("price_per_m2")
  quantity        Int       @default(1)
  subtotal        Float
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  cart            Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product         Product   @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Order {
  id              String        @id @default(uuid())
  userId          String        @map("user_id")
  status          OrderStatus   @default(PENDING)
  subtotal        Float
  instalacao      Float
  frete           Float
  desconto        Float         @default(0)
  total           Float
  paymentMethod   PaymentMethod @map("payment_method")
  paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  user            User          @relation(fields: [userId], references: [id])
  items           OrderItem[]
  shipping        Shipping?
  payment         Payment?

  @@map("orders")
}

model Payment {
  id                    String        @id @default(uuid())
  orderId               String        @unique @map("order_id")
  mercadoPagoId         String?       @unique @map("mercado_pago_id")
  preferenceId          String?       @unique @map("preference_id")
  status                PaymentStatus @default(PENDING)
  amount                Float
  paymentMethod         PaymentMethod @map("payment_method")
  paymentMethodId       String?       @map("payment_method_id")
  transactionAmount     Float?        @map("transaction_amount")
  netAmount             Float?        @map("net_amount")
  mercadoPagoFee        Float?        @map("mercado_pago_fee")
  payerEmail            String?       @map("payer_email")
  payerDocument         String?       @map("payer_document")
  payerName             String?       @map("payer_name")
  externalReference     String?       @map("external_reference")
  description           String?
  pixQrCode             String?       @map("pix_qr_code")
  pixQrCodeBase64       String?       @map("pix_qr_code_base64")
  boletoUrl             String?       @map("boleto_url")
  boletoBarcode         String?       @map("boleto_barcode")
  approvedAt            DateTime?     @map("approved_at")
  expiresAt             DateTime?     @map("expires_at")
  webhookNotifications  String?       @map("webhook_notifications") // JSON array stored as string
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")

  order                 Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model OrderItem {
  id              String    @id @default(uuid())
  orderId         String    @map("order_id")
  productId       String    @map("product_id")
  widthCm         Int       @map("width_cm")
  heightCm        Int       @map("height_cm")
  areaCobravel    Float     @map("area_cobravel")
  pricePerM2      Float     @map("price_per_m2")
  quantity        Int       @default(1)
  subtotal        Float
  createdAt       DateTime  @default(now()) @map("created_at")

  order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product   @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Shipping {
  id              String    @id @default(uuid())
  orderId         String    @unique @map("order_id")
  recipientName   String    @map("recipient_name")
  street          String
  number          String
  complement      String?
  neighborhood    String
  city            String
  state           String
  zipCode         String    @map("zip_code")
  trackingCode    String?   @map("tracking_code")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("shipping")
}

model Favorite {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  productId   String    @map("product_id")
  createdAt   DateTime  @default(now()) @map("created_at")

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("favorites")
}

model Address {
  id            String    @id @default(uuid())
  userId        String    @map("user_id")
  name          String    // Ex: "Casa", "Trabalho", etc
  street        String
  number        String
  complement    String?
  neighborhood  String
  city          String
  state         String
  zipCode       String    @map("zip_code")
  isDefault     Boolean   @default(false) @map("is_default")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model MercadoPagoConfig {
  id                String        @id @default(uuid())
  checkoutMode      CheckoutMode  @default(INTERNAL) @map("checkout_mode")
  publicKey         String        @default("") @map("public_key")
  accessToken       String        @default("") @map("access_token")
  webhookSecret     String?       @map("webhook_secret")
  isProduction      Boolean       @default(false) @map("is_production")
  notificationUrl   String?       @map("notification_url")
  successUrl        String        @default("/checkout/sucesso") @map("success_url")
  failureUrl        String        @default("/checkout/falha") @map("failure_url")
  pendingUrl        String        @default("/checkout/pendente") @map("pending_url")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  @@map("mercadopago_config")
}

enum Role {
  USER
  ADMIN
}

enum Luminosidade {
  Translucida
  Blackout
}

enum Material {
  Tecido
  PVC
  Madeira
  Bambu
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
  BOLETO
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  REFUNDED
}

enum CheckoutMode {
  INTERNAL      // Checkout próprio do site (páginas resumo/sucesso)
  MERCADOPAGO   // Redireciona para Mercado Pago
  PAGSEGURO     // Futuro: PagSeguro
  STRIPE        // Futuro: Stripe
  PAYPAL        // Futuro: PayPal
}